/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "dialrpc_types.h"

#include <algorithm>

namespace rpc { namespace dial { namespace yamutech { namespace com {

int _kModuleTypeValues[] = {
  ModuleType::DIALING
};
const char* _kModuleTypeNames[] = {
  "DIALING"
};
const std::map<int, const char*> _ModuleType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(1, _kModuleTypeValues, _kModuleTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kDialStatusValues[] = {
  DialStatus::OK,
  DialStatus::FAIL
};
const char* _kDialStatusNames[] = {
  "OK",
  "FAIL"
};
const std::map<int, const char*> _DialStatus_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kDialStatusValues, _kDialStatusNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kRetCodeValues[] = {
  RetCode::OK,
  RetCode::FAIL
};
const char* _kRetCodeNames[] = {
  "OK",
  "FAIL"
};
const std::map<int, const char*> _RetCode_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kRetCodeValues, _kRetCodeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kDialMethodValues[] = {
  DialMethod::DIAL_TCPPORT,
  DialMethod::DIAL_IMCP,
  DialMethod::DIAL_HTTPGET,
  DialMethod::DIAL_DATABASE,
  DialMethod::DIAL_EXTHTTPGET,
  DialMethod::DIAL_EXTTCPPORT,
  DialMethod::DIAL_EXTHTTPPOST,
  DialMethod::DIAL_HTTPCOMMON,
  DialMethod::DIAL_UDPPORT,
  DialMethod::DIAL_FTP,
  DialMethod::DIAL_SMTP,
  DialMethod::DIAL_SNMP,
  DialMethod::DIAL_ORACLE
};
const char* _kDialMethodNames[] = {
  "DIAL_TCPPORT",
  "DIAL_IMCP",
  "DIAL_HTTPGET",
  "DIAL_DATABASE",
  "DIAL_EXTHTTPGET",
  "DIAL_EXTTCPPORT",
  "DIAL_EXTHTTPPOST",
  "DIAL_HTTPCOMMON",
  "DIAL_UDPPORT",
  "DIAL_FTP",
  "DIAL_SMTP",
  "DIAL_SNMP",
  "DIAL_ORACLE"
};
const std::map<int, const char*> _DialMethod_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(13, _kDialMethodValues, _kDialMethodNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kModuleStateValues[] = {
  ModuleState::STARTUP,
  ModuleState::REGISTERED
};
const char* _kModuleStateNames[] = {
  "STARTUP",
  "REGISTERED"
};
const std::map<int, const char*> _ModuleState_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kModuleStateValues, _kModuleStateNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kSysCommandValues[] = {
  SysCommand::RestoreConfig
};
const char* _kSysCommandNames[] = {
  "RestoreConfig"
};
const std::map<int, const char*> _SysCommand_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(1, _kSysCommandValues, _kSysCommandNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kDialServerTypeValues[] = {
  DialServerType::XPROXY,
  DialServerType::REDIRECT,
  DialServerType::XFORWARD,
  DialServerType::DATACENTER
};
const char* _kDialServerTypeNames[] = {
  "XPROXY",
  "REDIRECT",
  "XFORWARD",
  "DATACENTER"
};
const std::map<int, const char*> _DialServerType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kDialServerTypeValues, _kDialServerTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kSnmpDevTypeValues[] = {
  SnmpDevType::HOST,
  SnmpDevType::ROUTER,
  SnmpDevType::H3C,
  SnmpDevType::HUAWEI,
  SnmpDevType::CISCO
};
const char* _kSnmpDevTypeNames[] = {
  "HOST",
  "ROUTER",
  "H3C",
  "HUAWEI",
  "CISCO"
};
const std::map<int, const char*> _SnmpDevType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(5, _kSnmpDevTypeValues, _kSnmpDevTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* Xception::ascii_fingerprint = "3F5FC93B338687BC7235B1AB103F47B3";
const uint8_t Xception::binary_fingerprint[16] = {0x3F,0x5F,0xC9,0x3B,0x33,0x86,0x87,0xBC,0x72,0x35,0xB1,0xAB,0x10,0x3F,0x47,0xB3};

uint32_t Xception::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->errorCode);
          this->__isset.errorCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Xception::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Xception");

  xfer += oprot->writeFieldBegin("errorCode", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->errorCode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Xception &a, Xception &b) {
  using ::std::swap;
  swap(a.errorCode, b.errorCode);
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

const char* HeartBeatState::ascii_fingerprint = "7D4563655A5F82FED16B1F5CE7672F0F";
const uint8_t HeartBeatState::binary_fingerprint[16] = {0x7D,0x45,0x63,0x65,0x5A,0x5F,0x82,0xFE,0xD1,0x6B,0x1F,0x5C,0xE7,0x67,0x2F,0x0F};

uint32_t HeartBeatState::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->mState = (ModuleState::type)ecast0;
          this->__isset.mState = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->serverState);
          this->__isset.serverState = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t HeartBeatState::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("HeartBeatState");

  xfer += oprot->writeFieldBegin("mState", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->mState);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("serverState", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->serverState);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(HeartBeatState &a, HeartBeatState &b) {
  using ::std::swap;
  swap(a.mState, b.mState);
  swap(a.serverState, b.serverState);
  swap(a.__isset, b.__isset);
}

const char* IpAddr::ascii_fingerprint = "3F5FC93B338687BC7235B1AB103F47B3";
const uint8_t IpAddr::binary_fingerprint[16] = {0x3F,0x5F,0xC9,0x3B,0x33,0x86,0x87,0xBC,0x72,0x35,0xB1,0xAB,0x10,0x3F,0x47,0xB3};

uint32_t IpAddr::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->version);
          this->__isset.version = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->addr);
          this->__isset.addr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t IpAddr::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("IpAddr");

  xfer += oprot->writeFieldBegin("version", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->version);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("addr", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->addr);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(IpAddr &a, IpAddr &b) {
  using ::std::swap;
  swap(a.version, b.version);
  swap(a.addr, b.addr);
  swap(a.__isset, b.__isset);
}

const char* IpsecAddress::ascii_fingerprint = "9A8F93F25ADECFCB7475FE2B2CCBA45A";
const uint8_t IpsecAddress::binary_fingerprint[16] = {0x9A,0x8F,0x93,0xF2,0x5A,0xDE,0xCF,0xCB,0x74,0x75,0xFE,0x2B,0x2C,0xCB,0xA4,0x5A};

uint32_t IpsecAddress::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ip.read(iprot);
          this->__isset.ip = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->mask);
          this->__isset.mask = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t IpsecAddress::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("IpsecAddress");

  xfer += oprot->writeFieldBegin("ip", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->ip.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("mask", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->mask);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(IpsecAddress &a, IpsecAddress &b) {
  using ::std::swap;
  swap(a.ip, b.ip);
  swap(a.mask, b.mask);
  swap(a.__isset, b.__isset);
}

const char* SysIpSec::ascii_fingerprint = "06F2289C6439BB53A2F13AD977E2B0A0";
const uint8_t SysIpSec::binary_fingerprint[16] = {0x06,0xF2,0x28,0x9C,0x64,0x39,0xBB,0x53,0xA2,0xF1,0x3A,0xD9,0x77,0xE2,0xB0,0xA0};

uint32_t SysIpSec::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ipsec.read(iprot);
          this->__isset.ipsec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->recordId);
          this->__isset.recordId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SysIpSec::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("SysIpSec");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ipsec", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->ipsec.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("recordId", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->recordId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SysIpSec &a, SysIpSec &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.ipsec, b.ipsec);
  swap(a.recordId, b.recordId);
  swap(a.__isset, b.__isset);
}

const char* DialOption::ascii_fingerprint = "342D8159ED3852BA5ADC57C44E8B471C";
const uint8_t DialOption::binary_fingerprint[16] = {0x34,0x2D,0x81,0x59,0xED,0x38,0x52,0xBA,0x5A,0xDC,0x57,0xC4,0x4E,0x8B,0x47,0x1C};

uint32_t DialOption::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->destUrl);
          this->__isset.destUrl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->testMethod);
          this->__isset.testMethod = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->expectCode.clear();
            uint32_t _size1;
            ::apache::thrift::protocol::TType _etype4;
            xfer += iprot->readListBegin(_etype4, _size1);
            this->expectCode.resize(_size1);
            uint32_t _i5;
            for (_i5 = 0; _i5 < _size1; ++_i5)
            {
              xfer += iprot->readI32(this->expectCode[_i5]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.expectCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->expectMatch);
          this->__isset.expectMatch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->contentType);
          this->__isset.contentType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->tag);
          this->__isset.tag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DialOption::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("DialOption");

  xfer += oprot->writeFieldBegin("destUrl", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->destUrl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("testMethod", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->testMethod);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("expectCode", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->expectCode.size()));
    std::vector<int32_t> ::const_iterator _iter6;
    for (_iter6 = this->expectCode.begin(); _iter6 != this->expectCode.end(); ++_iter6)
    {
      xfer += oprot->writeI32((*_iter6));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("expectMatch", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->expectMatch);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("contentType", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->contentType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tag", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->tag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DialOption &a, DialOption &b) {
  using ::std::swap;
  swap(a.destUrl, b.destUrl);
  swap(a.testMethod, b.testMethod);
  swap(a.expectCode, b.expectCode);
  swap(a.expectMatch, b.expectMatch);
  swap(a.contentType, b.contentType);
  swap(a.tag, b.tag);
  swap(a.__isset, b.__isset);
}

const char* HealthPolicyInfo::ascii_fingerprint = "06F71DC775194AC33F1C69F647E6A2BA";
const uint8_t HealthPolicyInfo::binary_fingerprint[16] = {0x06,0xF7,0x1D,0xC7,0x75,0x19,0x4A,0xC3,0x3F,0x1C,0x69,0xF6,0x47,0xE6,0xA2,0xBA};

uint32_t HealthPolicyInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast7;
          xfer += iprot->readI32(ecast7);
          this->method = (DialMethod::type)ecast7;
          this->__isset.method = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->port);
          this->__isset.port = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->freq);
          this->__isset.freq = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->times);
          this->__isset.times = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->passed);
          this->__isset.passed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->option.read(iprot);
          this->__isset.option = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t HealthPolicyInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("HealthPolicyInfo");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("method", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->method);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.port) {
    xfer += oprot->writeFieldBegin("port", ::apache::thrift::protocol::T_I16, 3);
    xfer += oprot->writeI16(this->port);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("freq", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->freq);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("times", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->times);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("passed", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->passed);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("option", ::apache::thrift::protocol::T_STRUCT, 7);
  xfer += this->option.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(HealthPolicyInfo &a, HealthPolicyInfo &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.method, b.method);
  swap(a.port, b.port);
  swap(a.freq, b.freq);
  swap(a.times, b.times);
  swap(a.passed, b.passed);
  swap(a.option, b.option);
  swap(a.__isset, b.__isset);
}

const char* DialRecord::ascii_fingerprint = "2040ECA943D9E6617B68D06B19F667D5";
const uint8_t DialRecord::binary_fingerprint[16] = {0x20,0x40,0xEC,0xA9,0x43,0xD9,0xE6,0x61,0x7B,0x68,0xD0,0x6B,0x19,0xF6,0x67,0xD5};

uint32_t DialRecord::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->rid);
          this->__isset.rid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ip.read(iprot);
          this->__isset.ip = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->ttl);
          this->__isset.ttl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->priority);
          this->__isset.priority = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->enabled);
          this->__isset.enabled = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DialRecord::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("DialRecord");

  xfer += oprot->writeFieldBegin("rid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->rid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ip", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->ip.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ttl", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->ttl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("priority", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->priority);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("enabled", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->enabled);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DialRecord &a, DialRecord &b) {
  using ::std::swap;
  swap(a.rid, b.rid);
  swap(a.ip, b.ip);
  swap(a.ttl, b.ttl);
  swap(a.priority, b.priority);
  swap(a.enabled, b.enabled);
  swap(a.__isset, b.__isset);
}

const char* DialRecordStatus::ascii_fingerprint = "8AD8F7908FF0D5FB40F4F4BAEA3D0B0A";
const uint8_t DialRecordStatus::binary_fingerprint[16] = {0x8A,0xD8,0xF7,0x90,0x8F,0xF0,0xD5,0xFB,0x40,0xF4,0xF4,0xBA,0xEA,0x3D,0x0B,0x0A};

uint32_t DialRecordStatus::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->rid);
          this->__isset.rid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast8;
          xfer += iprot->readI32(ecast8);
          this->status = (DialStatus::type)ecast8;
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->delay);
          this->__isset.delay = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DialRecordStatus::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("DialRecordStatus");

  xfer += oprot->writeFieldBegin("rid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->rid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("delay", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->delay);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DialRecordStatus &a, DialRecordStatus &b) {
  using ::std::swap;
  swap(a.rid, b.rid);
  swap(a.status, b.status);
  swap(a.delay, b.delay);
  swap(a.__isset, b.__isset);
}

const char* DialHealthResult::ascii_fingerprint = "3D4EAE4B96E2BF2349FA9E576709D25B";
const uint8_t DialHealthResult::binary_fingerprint[16] = {0x3D,0x4E,0xAE,0x4B,0x96,0xE2,0xBF,0x23,0x49,0xFA,0x9E,0x57,0x67,0x09,0xD2,0x5B};

uint32_t DialHealthResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->groupName);
          this->__isset.groupName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->policyName);
          this->__isset.policyName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->statusList.clear();
            uint32_t _size9;
            ::apache::thrift::protocol::TType _etype12;
            xfer += iprot->readListBegin(_etype12, _size9);
            this->statusList.resize(_size9);
            uint32_t _i13;
            for (_i13 = 0; _i13 < _size9; ++_i13)
            {
              xfer += this->statusList[_i13].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.statusList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DialHealthResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("DialHealthResult");

  xfer += oprot->writeFieldBegin("groupName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->groupName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("policyName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->policyName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("statusList", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->statusList.size()));
    std::vector<DialRecordStatus> ::const_iterator _iter14;
    for (_iter14 = this->statusList.begin(); _iter14 != this->statusList.end(); ++_iter14)
    {
      xfer += (*_iter14).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DialHealthResult &a, DialHealthResult &b) {
  using ::std::swap;
  swap(a.groupName, b.groupName);
  swap(a.policyName, b.policyName);
  swap(a.statusList, b.statusList);
  swap(a.__isset, b.__isset);
}

const char* DialNginxServer::ascii_fingerprint = "EEBC915CE44901401D881E6091423036";
const uint8_t DialNginxServer::binary_fingerprint[16] = {0xEE,0xBC,0x91,0x5C,0xE4,0x49,0x01,0x40,0x1D,0x88,0x1E,0x60,0x91,0x42,0x30,0x36};

uint32_t DialNginxServer::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->localURL);
          this->__isset.localURL = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->priority);
          this->__isset.priority = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DialNginxServer::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("DialNginxServer");

  xfer += oprot->writeFieldBegin("localURL", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->localURL);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("priority", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->priority);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DialNginxServer &a, DialNginxServer &b) {
  using ::std::swap;
  swap(a.localURL, b.localURL);
  swap(a.priority, b.priority);
  swap(a.__isset, b.__isset);
}

const char* DialNginxStatus::ascii_fingerprint = "73F1B3C1E3B5C60C655B5B4BD8AA303B";
const uint8_t DialNginxStatus::binary_fingerprint[16] = {0x73,0xF1,0xB3,0xC1,0xE3,0xB5,0xC6,0x0C,0x65,0x5B,0x5B,0x4B,0xD8,0xAA,0x30,0x3B};

uint32_t DialNginxStatus::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->server.read(iprot);
          this->__isset.server = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast15;
          xfer += iprot->readI32(ecast15);
          this->status = (DialStatus::type)ecast15;
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->delay);
          this->__isset.delay = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DialNginxStatus::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("DialNginxStatus");

  xfer += oprot->writeFieldBegin("server", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->server.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("delay", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->delay);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DialNginxStatus &a, DialNginxStatus &b) {
  using ::std::swap;
  swap(a.server, b.server);
  swap(a.status, b.status);
  swap(a.delay, b.delay);
  swap(a.__isset, b.__isset);
}

const char* DialNginxResult::ascii_fingerprint = "6335D96395B8A7E6EB37E0D181972434";
const uint8_t DialNginxResult::binary_fingerprint[16] = {0x63,0x35,0xD9,0x63,0x95,0xB8,0xA7,0xE6,0xEB,0x37,0xE0,0xD1,0x81,0x97,0x24,0x34};

uint32_t DialNginxResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->groupName);
          this->__isset.groupName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->policyName);
          this->__isset.policyName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->statusList.clear();
            uint32_t _size16;
            ::apache::thrift::protocol::TType _etype19;
            xfer += iprot->readListBegin(_etype19, _size16);
            this->statusList.resize(_size16);
            uint32_t _i20;
            for (_i20 = 0; _i20 < _size16; ++_i20)
            {
              xfer += this->statusList[_i20].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.statusList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DialNginxResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("DialNginxResult");

  xfer += oprot->writeFieldBegin("groupName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->groupName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("policyName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->policyName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("statusList", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->statusList.size()));
    std::vector<DialNginxStatus> ::const_iterator _iter21;
    for (_iter21 = this->statusList.begin(); _iter21 != this->statusList.end(); ++_iter21)
    {
      xfer += (*_iter21).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DialNginxResult &a, DialNginxResult &b) {
  using ::std::swap;
  swap(a.groupName, b.groupName);
  swap(a.policyName, b.policyName);
  swap(a.statusList, b.statusList);
  swap(a.__isset, b.__isset);
}

const char* DialServerStatus::ascii_fingerprint = "AF8E3FB9CBF3978AE2D030441A47DA50";
const uint8_t DialServerStatus::binary_fingerprint[16] = {0xAF,0x8E,0x3F,0xB9,0xCB,0xF3,0x97,0x8A,0xE2,0xD0,0x30,0x44,0x1A,0x47,0xDA,0x50};

uint32_t DialServerStatus::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->rid);
          this->__isset.rid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ip.read(iprot);
          this->__isset.ip = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast22;
          xfer += iprot->readI32(ecast22);
          this->status = (DialStatus::type)ecast22;
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->delay);
          this->__isset.delay = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DialServerStatus::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("DialServerStatus");

  xfer += oprot->writeFieldBegin("rid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->rid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ip", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->ip.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("delay", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->delay);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DialServerStatus &a, DialServerStatus &b) {
  using ::std::swap;
  swap(a.rid, b.rid);
  swap(a.ip, b.ip);
  swap(a.status, b.status);
  swap(a.delay, b.delay);
  swap(a.__isset, b.__isset);
}

const char* DialServerResult::ascii_fingerprint = "9B1BA2DD2DCEEA8FD1297378D74AFCA7";
const uint8_t DialServerResult::binary_fingerprint[16] = {0x9B,0x1B,0xA2,0xDD,0x2D,0xCE,0xEA,0x8F,0xD1,0x29,0x73,0x78,0xD7,0x4A,0xFC,0xA7};

uint32_t DialServerResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->status.read(iprot);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast23;
          xfer += iprot->readI32(ecast23);
          this->typ = (DialServerType::type)ecast23;
          this->__isset.typ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DialServerResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("DialServerResult");

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->status.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("typ", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->typ);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DialServerResult &a, DialServerResult &b) {
  using ::std::swap;
  swap(a.status, b.status);
  swap(a.typ, b.typ);
  swap(a.__isset, b.__isset);
}

const char* DcInfo::ascii_fingerprint = "78CEBF88A1820368C93B73ECA52C720A";
const uint8_t DcInfo::binary_fingerprint[16] = {0x78,0xCE,0xBF,0x88,0xA1,0x82,0x03,0x68,0xC9,0x3B,0x73,0xEC,0xA5,0x2C,0x72,0x0A};

uint32_t DcInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ip.read(iprot);
          this->__isset.ip = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->PolicyList.clear();
            uint32_t _size24;
            ::apache::thrift::protocol::TType _etype27;
            xfer += iprot->readListBegin(_etype27, _size24);
            this->PolicyList.resize(_size24);
            uint32_t _i28;
            for (_i28 = 0; _i28 < _size24; ++_i28)
            {
              xfer += iprot->readString(this->PolicyList[_i28]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.PolicyList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DcInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("DcInfo");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ip", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->ip.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("PolicyList", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->PolicyList.size()));
    std::vector<std::string> ::const_iterator _iter29;
    for (_iter29 = this->PolicyList.begin(); _iter29 != this->PolicyList.end(); ++_iter29)
    {
      xfer += oprot->writeString((*_iter29));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DcInfo &a, DcInfo &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.ip, b.ip);
  swap(a.PolicyList, b.PolicyList);
  swap(a.__isset, b.__isset);
}

const char* DialDcResult::ascii_fingerprint = "BDBC9BBEA19355AE3A76B17BCC25C18F";
const uint8_t DialDcResult::binary_fingerprint[16] = {0xBD,0xBC,0x9B,0xBE,0xA1,0x93,0x55,0xAE,0x3A,0x76,0xB1,0x7B,0xCC,0x25,0xC1,0x8F};

uint32_t DialDcResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->policy);
          this->__isset.policy = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast30;
          xfer += iprot->readI32(ecast30);
          this->status = (DialStatus::type)ecast30;
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->delay);
          this->__isset.delay = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DialDcResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("DialDcResult");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("policy", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->policy);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("delay", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->delay);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DialDcResult &a, DialDcResult &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.policy, b.policy);
  swap(a.status, b.status);
  swap(a.delay, b.delay);
  swap(a.__isset, b.__isset);
}

const char* SnmpGroupInfo::ascii_fingerprint = "D3D4594CAB2F905FA95839ACB4FB0CC4";
const uint8_t SnmpGroupInfo::binary_fingerprint[16] = {0xD3,0xD4,0x59,0x4C,0xAB,0x2F,0x90,0x5F,0xA9,0x58,0x39,0xAC,0xB4,0xFB,0x0C,0xC4};

uint32_t SnmpGroupInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->enable);
          this->__isset.enable = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->community);
          this->__isset.community = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->user);
          this->__isset.user = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->passwd);
          this->__isset.passwd = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->version);
          this->__isset.version = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->interval);
          this->__isset.interval = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->port);
          this->__isset.port = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ip.read(iprot);
          this->__isset.ip = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast31;
          xfer += iprot->readI32(ecast31);
          this->type = (SnmpDevType::type)ecast31;
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SnmpGroupInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("SnmpGroupInfo");

  xfer += oprot->writeFieldBegin("enable", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->enable);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("community", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->community);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("user", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->user);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("passwd", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->passwd);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("version", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->version);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("interval", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->interval);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("port", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->port);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ip", ::apache::thrift::protocol::T_STRUCT, 9);
  xfer += this->ip.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32((int32_t)this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SnmpGroupInfo &a, SnmpGroupInfo &b) {
  using ::std::swap;
  swap(a.enable, b.enable);
  swap(a.name, b.name);
  swap(a.community, b.community);
  swap(a.user, b.user);
  swap(a.passwd, b.passwd);
  swap(a.version, b.version);
  swap(a.interval, b.interval);
  swap(a.port, b.port);
  swap(a.ip, b.ip);
  swap(a.type, b.type);
  swap(a.__isset, b.__isset);
}

const char* InterfaceTraffic::ascii_fingerprint = "1BC2A204AB4F887721511486B2DFEBC8";
const uint8_t InterfaceTraffic::binary_fingerprint[16] = {0x1B,0xC2,0xA2,0x04,0xAB,0x4F,0x88,0x77,0x21,0x51,0x14,0x86,0xB2,0xDF,0xEB,0xC8};

uint32_t InterfaceTraffic::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->inoctets);
          this->__isset.inoctets = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->outoctets);
          this->__isset.outoctets = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t InterfaceTraffic::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("InterfaceTraffic");

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("inoctets", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->inoctets);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("outoctets", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->outoctets);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(InterfaceTraffic &a, InterfaceTraffic &b) {
  using ::std::swap;
  swap(a.index, b.index);
  swap(a.inoctets, b.inoctets);
  swap(a.outoctets, b.outoctets);
  swap(a.__isset, b.__isset);
}

const char* IpMac::ascii_fingerprint = "9B1D74D8FFAD0A13E0712B744A52C094";
const uint8_t IpMac::binary_fingerprint[16] = {0x9B,0x1D,0x74,0xD8,0xFF,0xAD,0x0A,0x13,0xE0,0x71,0x2B,0x74,0x4A,0x52,0xC0,0x94};

uint32_t IpMac::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ip.read(iprot);
          this->__isset.ip = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->physaddress);
          this->__isset.physaddress = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t IpMac::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("IpMac");

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ip", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->ip.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("physaddress", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->physaddress);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(IpMac &a, IpMac &b) {
  using ::std::swap;
  swap(a.index, b.index);
  swap(a.ip, b.ip);
  swap(a.physaddress, b.physaddress);
  swap(a.__isset, b.__isset);
}

const char* MacTable::ascii_fingerprint = "70563A0628F75DF9555F4D24690B1E26";
const uint8_t MacTable::binary_fingerprint[16] = {0x70,0x56,0x3A,0x06,0x28,0xF7,0x5D,0xF9,0x55,0x5F,0x4D,0x24,0x69,0x0B,0x1E,0x26};

uint32_t MacTable::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->macaddress);
          this->__isset.macaddress = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->portname);
          this->__isset.portname = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MacTable::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MacTable");

  xfer += oprot->writeFieldBegin("macaddress", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->macaddress);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("portname", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->portname);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MacTable &a, MacTable &b) {
  using ::std::swap;
  swap(a.macaddress, b.macaddress);
  swap(a.index, b.index);
  swap(a.portname, b.portname);
  swap(a.__isset, b.__isset);
}

const char* InterfaceInfo::ascii_fingerprint = "AE370879A873E96D3FAAE12B6134D7C6";
const uint8_t InterfaceInfo::binary_fingerprint[16] = {0xAE,0x37,0x08,0x79,0xA8,0x73,0xE9,0x6D,0x3F,0xAA,0xE1,0x2B,0x61,0x34,0xD7,0xC6};

uint32_t InterfaceInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->descr);
          this->__isset.descr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->status);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->speed);
          this->__isset.speed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->mtu);
          this->__isset.mtu = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->physaddress);
          this->__isset.physaddress = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t InterfaceInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("InterfaceInfo");

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("descr", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->descr);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("speed", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->speed);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("mtu", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->mtu);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("physaddress", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->physaddress);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(InterfaceInfo &a, InterfaceInfo &b) {
  using ::std::swap;
  swap(a.index, b.index);
  swap(a.descr, b.descr);
  swap(a.type, b.type);
  swap(a.status, b.status);
  swap(a.speed, b.speed);
  swap(a.mtu, b.mtu);
  swap(a.physaddress, b.physaddress);
  swap(a.__isset, b.__isset);
}

const char* RouteInfo::ascii_fingerprint = "0292F2545B3B57ACE50641F34B7452F3";
const uint8_t RouteInfo::binary_fingerprint[16] = {0x02,0x92,0xF2,0x54,0x5B,0x3B,0x57,0xAC,0xE5,0x06,0x41,0xF3,0x4B,0x74,0x52,0xF3};

uint32_t RouteInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->ifindex);
          this->__isset.ifindex = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->destination.read(iprot);
          this->__isset.destination = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->gateway.read(iprot);
          this->__isset.gateway = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->genmask.read(iprot);
          this->__isset.genmask = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->proto);
          this->__isset.proto = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RouteInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RouteInfo");

  xfer += oprot->writeFieldBegin("ifindex", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->ifindex);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("destination", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->destination.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gateway", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->gateway.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("genmask", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->genmask.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("proto", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->proto);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RouteInfo &a, RouteInfo &b) {
  using ::std::swap;
  swap(a.ifindex, b.ifindex);
  swap(a.destination, b.destination);
  swap(a.gateway, b.gateway);
  swap(a.genmask, b.genmask);
  swap(a.type, b.type);
  swap(a.proto, b.proto);
  swap(a.__isset, b.__isset);
}

const char* SysInfo::ascii_fingerprint = "E559B46C8C264E8A08FC77DF250DF8D1";
const uint8_t SysInfo::binary_fingerprint[16] = {0xE5,0x59,0xB4,0x6C,0x8C,0x26,0x4E,0x8A,0x08,0xFC,0x77,0xDF,0x25,0x0D,0xF8,0xD1};

uint32_t SysInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->load);
          this->__isset.load = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->usercpu);
          this->__isset.usercpu = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->syscpu);
          this->__isset.syscpu = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->idlecpu);
          this->__isset.idlecpu = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->totalmem);
          this->__isset.totalmem = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->freemem);
          this->__isset.freemem = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->buffer);
          this->__isset.buffer = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->cache);
          this->__isset.cache = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->availmem);
          this->__isset.availmem = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SysInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("SysInfo");

  xfer += oprot->writeFieldBegin("load", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->load);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("usercpu", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->usercpu);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("syscpu", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->syscpu);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("idlecpu", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->idlecpu);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("totalmem", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->totalmem);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("freemem", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->freemem);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("buffer", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->buffer);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cache", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->cache);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("availmem", ::apache::thrift::protocol::T_I32, 9);
  xfer += oprot->writeI32(this->availmem);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SysInfo &a, SysInfo &b) {
  using ::std::swap;
  swap(a.load, b.load);
  swap(a.usercpu, b.usercpu);
  swap(a.syscpu, b.syscpu);
  swap(a.idlecpu, b.idlecpu);
  swap(a.totalmem, b.totalmem);
  swap(a.freemem, b.freemem);
  swap(a.buffer, b.buffer);
  swap(a.cache, b.cache);
  swap(a.availmem, b.availmem);
  swap(a.__isset, b.__isset);
}

const char* ProcessInfo::ascii_fingerprint = "64188B05601A42A1317799974F112AE1";
const uint8_t ProcessInfo::binary_fingerprint[16] = {0x64,0x18,0x8B,0x05,0x60,0x1A,0x42,0xA1,0x31,0x77,0x99,0x97,0x4F,0x11,0x2A,0xE1};

uint32_t ProcessInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->existflag);
          this->__isset.existflag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->pid);
          this->__isset.pid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->cputime);
          this->__isset.cputime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->usedmem);
          this->__isset.usedmem = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ProcessInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ProcessInfo");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("existflag", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->existflag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pid", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->pid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cputime", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->cputime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("usedmem", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->usedmem);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ProcessInfo &a, ProcessInfo &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.existflag, b.existflag);
  swap(a.pid, b.pid);
  swap(a.cputime, b.cputime);
  swap(a.usedmem, b.usedmem);
  swap(a.__isset, b.__isset);
}

}}}} // namespace
