/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Agent_H
#define Agent_H

#include "thrift/TDispatchProcessor.h"
#include "dialrpc_types.h"

namespace rpc { namespace dial { namespace yamutech { namespace com {

class AgentIf {
 public:
  virtual ~AgentIf() {}
  virtual RetCode::type registerModule(const ModuleType::type typ) = 0;
  virtual RetCode::type updateHealthStatus(const std::vector<DialHealthResult> & results) = 0;
  virtual RetCode::type updateServerStatus(const std::vector<DialServerResult> & results) = 0;
  virtual RetCode::type updateDcStatus(const std::vector<DialDcResult> & results) = 0;
  virtual RetCode::type updateNginxStatus(const std::vector<DialNginxResult> & results) = 0;
  virtual RetCode::type updateSysInfo(const std::string& snmp, const SysInfo& sysinfo) = 0;
  virtual RetCode::type updateInterfaceInfo(const std::string& snmp, const std::vector<InterfaceInfo> & interfaces) = 0;
  virtual RetCode::type updateInterfaceTraffic(const std::string& snmp, const std::vector<InterfaceTraffic> & traffic) = 0;
  virtual RetCode::type updateInterfaceIpMac(const std::string& snmp, const std::vector<IpMac> & ipmac) = 0;
  virtual RetCode::type updateRouteInfo(const std::string& snmp, const std::vector<RouteInfo> & routeinfo) = 0;
  virtual RetCode::type updateProcessInfo(const std::string& snmp, const ProcessInfo& processinfo) = 0;
  virtual RetCode::type updateIpSecOnlineIp(const std::string& ipsecid, const std::vector<IpAddr> & iplist) = 0;
  virtual RetCode::type updateMacTable(const std::string& snmp, const std::vector<MacTable> & mactable) = 0;
};

class AgentIfFactory {
 public:
  typedef AgentIf Handler;

  virtual ~AgentIfFactory() {}

  virtual AgentIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(AgentIf* /* handler */) = 0;
};

class AgentIfSingletonFactory : virtual public AgentIfFactory {
 public:
  AgentIfSingletonFactory(const boost::shared_ptr<AgentIf>& iface) : iface_(iface) {}
  virtual ~AgentIfSingletonFactory() {}

  virtual AgentIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(AgentIf* /* handler */) {}

 protected:
  boost::shared_ptr<AgentIf> iface_;
};

class AgentNull : virtual public AgentIf {
 public:
  virtual ~AgentNull() {}
  RetCode::type registerModule(const ModuleType::type /* typ */) {
    RetCode::type _return = (RetCode::type)0;
    return _return;
  }
  RetCode::type updateHealthStatus(const std::vector<DialHealthResult> & /* results */) {
    RetCode::type _return = (RetCode::type)0;
    return _return;
  }
  RetCode::type updateServerStatus(const std::vector<DialServerResult> & /* results */) {
    RetCode::type _return = (RetCode::type)0;
    return _return;
  }
  RetCode::type updateDcStatus(const std::vector<DialDcResult> & /* results */) {
    RetCode::type _return = (RetCode::type)0;
    return _return;
  }
  RetCode::type updateNginxStatus(const std::vector<DialNginxResult> & /* results */) {
    RetCode::type _return = (RetCode::type)0;
    return _return;
  }
  RetCode::type updateSysInfo(const std::string& /* snmp */, const SysInfo& /* sysinfo */) {
    RetCode::type _return = (RetCode::type)0;
    return _return;
  }
  RetCode::type updateInterfaceInfo(const std::string& /* snmp */, const std::vector<InterfaceInfo> & /* interfaces */) {
    RetCode::type _return = (RetCode::type)0;
    return _return;
  }
  RetCode::type updateInterfaceTraffic(const std::string& /* snmp */, const std::vector<InterfaceTraffic> & /* traffic */) {
    RetCode::type _return = (RetCode::type)0;
    return _return;
  }
  RetCode::type updateInterfaceIpMac(const std::string& /* snmp */, const std::vector<IpMac> & /* ipmac */) {
    RetCode::type _return = (RetCode::type)0;
    return _return;
  }
  RetCode::type updateRouteInfo(const std::string& /* snmp */, const std::vector<RouteInfo> & /* routeinfo */) {
    RetCode::type _return = (RetCode::type)0;
    return _return;
  }
  RetCode::type updateProcessInfo(const std::string& /* snmp */, const ProcessInfo& /* processinfo */) {
    RetCode::type _return = (RetCode::type)0;
    return _return;
  }
  RetCode::type updateIpSecOnlineIp(const std::string& /* ipsecid */, const std::vector<IpAddr> & /* iplist */) {
    RetCode::type _return = (RetCode::type)0;
    return _return;
  }
  RetCode::type updateMacTable(const std::string& /* snmp */, const std::vector<MacTable> & /* mactable */) {
    RetCode::type _return = (RetCode::type)0;
    return _return;
  }
};

typedef struct _Agent_registerModule_args__isset {
  _Agent_registerModule_args__isset() : typ(false) {}
  bool typ;
} _Agent_registerModule_args__isset;

class Agent_registerModule_args {
 public:

  Agent_registerModule_args() : typ((ModuleType::type)0) {
  }

  virtual ~Agent_registerModule_args() throw() {}

  ModuleType::type typ;

  _Agent_registerModule_args__isset __isset;

  void __set_typ(const ModuleType::type val) {
    typ = val;
  }

  bool operator == (const Agent_registerModule_args & rhs) const
  {
    if (!(typ == rhs.typ))
      return false;
    return true;
  }
  bool operator != (const Agent_registerModule_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Agent_registerModule_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Agent_registerModule_pargs {
 public:


  virtual ~Agent_registerModule_pargs() throw() {}

  const ModuleType::type* typ;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Agent_registerModule_result__isset {
  _Agent_registerModule_result__isset() : success(false), ex(false) {}
  bool success;
  bool ex;
} _Agent_registerModule_result__isset;

class Agent_registerModule_result {
 public:

  Agent_registerModule_result() : success((RetCode::type)0) {
  }

  virtual ~Agent_registerModule_result() throw() {}

  RetCode::type success;
  Xception ex;

  _Agent_registerModule_result__isset __isset;

  void __set_success(const RetCode::type val) {
    success = val;
  }

  void __set_ex(const Xception& val) {
    ex = val;
  }

  bool operator == (const Agent_registerModule_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const Agent_registerModule_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Agent_registerModule_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Agent_registerModule_presult__isset {
  _Agent_registerModule_presult__isset() : success(false), ex(false) {}
  bool success;
  bool ex;
} _Agent_registerModule_presult__isset;

class Agent_registerModule_presult {
 public:


  virtual ~Agent_registerModule_presult() throw() {}

  RetCode::type* success;
  Xception ex;

  _Agent_registerModule_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Agent_updateHealthStatus_args__isset {
  _Agent_updateHealthStatus_args__isset() : results(false) {}
  bool results;
} _Agent_updateHealthStatus_args__isset;

class Agent_updateHealthStatus_args {
 public:

  Agent_updateHealthStatus_args() {
  }

  virtual ~Agent_updateHealthStatus_args() throw() {}

  std::vector<DialHealthResult>  results;

  _Agent_updateHealthStatus_args__isset __isset;

  void __set_results(const std::vector<DialHealthResult> & val) {
    results = val;
  }

  bool operator == (const Agent_updateHealthStatus_args & rhs) const
  {
    if (!(results == rhs.results))
      return false;
    return true;
  }
  bool operator != (const Agent_updateHealthStatus_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Agent_updateHealthStatus_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Agent_updateHealthStatus_pargs {
 public:


  virtual ~Agent_updateHealthStatus_pargs() throw() {}

  const std::vector<DialHealthResult> * results;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Agent_updateHealthStatus_result__isset {
  _Agent_updateHealthStatus_result__isset() : success(false), ex(false) {}
  bool success;
  bool ex;
} _Agent_updateHealthStatus_result__isset;

class Agent_updateHealthStatus_result {
 public:

  Agent_updateHealthStatus_result() : success((RetCode::type)0) {
  }

  virtual ~Agent_updateHealthStatus_result() throw() {}

  RetCode::type success;
  Xception ex;

  _Agent_updateHealthStatus_result__isset __isset;

  void __set_success(const RetCode::type val) {
    success = val;
  }

  void __set_ex(const Xception& val) {
    ex = val;
  }

  bool operator == (const Agent_updateHealthStatus_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const Agent_updateHealthStatus_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Agent_updateHealthStatus_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Agent_updateHealthStatus_presult__isset {
  _Agent_updateHealthStatus_presult__isset() : success(false), ex(false) {}
  bool success;
  bool ex;
} _Agent_updateHealthStatus_presult__isset;

class Agent_updateHealthStatus_presult {
 public:


  virtual ~Agent_updateHealthStatus_presult() throw() {}

  RetCode::type* success;
  Xception ex;

  _Agent_updateHealthStatus_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Agent_updateServerStatus_args__isset {
  _Agent_updateServerStatus_args__isset() : results(false) {}
  bool results;
} _Agent_updateServerStatus_args__isset;

class Agent_updateServerStatus_args {
 public:

  Agent_updateServerStatus_args() {
  }

  virtual ~Agent_updateServerStatus_args() throw() {}

  std::vector<DialServerResult>  results;

  _Agent_updateServerStatus_args__isset __isset;

  void __set_results(const std::vector<DialServerResult> & val) {
    results = val;
  }

  bool operator == (const Agent_updateServerStatus_args & rhs) const
  {
    if (!(results == rhs.results))
      return false;
    return true;
  }
  bool operator != (const Agent_updateServerStatus_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Agent_updateServerStatus_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Agent_updateServerStatus_pargs {
 public:


  virtual ~Agent_updateServerStatus_pargs() throw() {}

  const std::vector<DialServerResult> * results;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Agent_updateServerStatus_result__isset {
  _Agent_updateServerStatus_result__isset() : success(false), ex(false) {}
  bool success;
  bool ex;
} _Agent_updateServerStatus_result__isset;

class Agent_updateServerStatus_result {
 public:

  Agent_updateServerStatus_result() : success((RetCode::type)0) {
  }

  virtual ~Agent_updateServerStatus_result() throw() {}

  RetCode::type success;
  Xception ex;

  _Agent_updateServerStatus_result__isset __isset;

  void __set_success(const RetCode::type val) {
    success = val;
  }

  void __set_ex(const Xception& val) {
    ex = val;
  }

  bool operator == (const Agent_updateServerStatus_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const Agent_updateServerStatus_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Agent_updateServerStatus_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Agent_updateServerStatus_presult__isset {
  _Agent_updateServerStatus_presult__isset() : success(false), ex(false) {}
  bool success;
  bool ex;
} _Agent_updateServerStatus_presult__isset;

class Agent_updateServerStatus_presult {
 public:


  virtual ~Agent_updateServerStatus_presult() throw() {}

  RetCode::type* success;
  Xception ex;

  _Agent_updateServerStatus_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Agent_updateDcStatus_args__isset {
  _Agent_updateDcStatus_args__isset() : results(false) {}
  bool results;
} _Agent_updateDcStatus_args__isset;

class Agent_updateDcStatus_args {
 public:

  Agent_updateDcStatus_args() {
  }

  virtual ~Agent_updateDcStatus_args() throw() {}

  std::vector<DialDcResult>  results;

  _Agent_updateDcStatus_args__isset __isset;

  void __set_results(const std::vector<DialDcResult> & val) {
    results = val;
  }

  bool operator == (const Agent_updateDcStatus_args & rhs) const
  {
    if (!(results == rhs.results))
      return false;
    return true;
  }
  bool operator != (const Agent_updateDcStatus_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Agent_updateDcStatus_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Agent_updateDcStatus_pargs {
 public:


  virtual ~Agent_updateDcStatus_pargs() throw() {}

  const std::vector<DialDcResult> * results;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Agent_updateDcStatus_result__isset {
  _Agent_updateDcStatus_result__isset() : success(false), ex(false) {}
  bool success;
  bool ex;
} _Agent_updateDcStatus_result__isset;

class Agent_updateDcStatus_result {
 public:

  Agent_updateDcStatus_result() : success((RetCode::type)0) {
  }

  virtual ~Agent_updateDcStatus_result() throw() {}

  RetCode::type success;
  Xception ex;

  _Agent_updateDcStatus_result__isset __isset;

  void __set_success(const RetCode::type val) {
    success = val;
  }

  void __set_ex(const Xception& val) {
    ex = val;
  }

  bool operator == (const Agent_updateDcStatus_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const Agent_updateDcStatus_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Agent_updateDcStatus_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Agent_updateDcStatus_presult__isset {
  _Agent_updateDcStatus_presult__isset() : success(false), ex(false) {}
  bool success;
  bool ex;
} _Agent_updateDcStatus_presult__isset;

class Agent_updateDcStatus_presult {
 public:


  virtual ~Agent_updateDcStatus_presult() throw() {}

  RetCode::type* success;
  Xception ex;

  _Agent_updateDcStatus_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Agent_updateNginxStatus_args__isset {
  _Agent_updateNginxStatus_args__isset() : results(false) {}
  bool results;
} _Agent_updateNginxStatus_args__isset;

class Agent_updateNginxStatus_args {
 public:

  Agent_updateNginxStatus_args() {
  }

  virtual ~Agent_updateNginxStatus_args() throw() {}

  std::vector<DialNginxResult>  results;

  _Agent_updateNginxStatus_args__isset __isset;

  void __set_results(const std::vector<DialNginxResult> & val) {
    results = val;
  }

  bool operator == (const Agent_updateNginxStatus_args & rhs) const
  {
    if (!(results == rhs.results))
      return false;
    return true;
  }
  bool operator != (const Agent_updateNginxStatus_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Agent_updateNginxStatus_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Agent_updateNginxStatus_pargs {
 public:


  virtual ~Agent_updateNginxStatus_pargs() throw() {}

  const std::vector<DialNginxResult> * results;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Agent_updateNginxStatus_result__isset {
  _Agent_updateNginxStatus_result__isset() : success(false), ex(false) {}
  bool success;
  bool ex;
} _Agent_updateNginxStatus_result__isset;

class Agent_updateNginxStatus_result {
 public:

  Agent_updateNginxStatus_result() : success((RetCode::type)0) {
  }

  virtual ~Agent_updateNginxStatus_result() throw() {}

  RetCode::type success;
  Xception ex;

  _Agent_updateNginxStatus_result__isset __isset;

  void __set_success(const RetCode::type val) {
    success = val;
  }

  void __set_ex(const Xception& val) {
    ex = val;
  }

  bool operator == (const Agent_updateNginxStatus_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const Agent_updateNginxStatus_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Agent_updateNginxStatus_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Agent_updateNginxStatus_presult__isset {
  _Agent_updateNginxStatus_presult__isset() : success(false), ex(false) {}
  bool success;
  bool ex;
} _Agent_updateNginxStatus_presult__isset;

class Agent_updateNginxStatus_presult {
 public:


  virtual ~Agent_updateNginxStatus_presult() throw() {}

  RetCode::type* success;
  Xception ex;

  _Agent_updateNginxStatus_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Agent_updateSysInfo_args__isset {
  _Agent_updateSysInfo_args__isset() : snmp(false), sysinfo(false) {}
  bool snmp;
  bool sysinfo;
} _Agent_updateSysInfo_args__isset;

class Agent_updateSysInfo_args {
 public:

  Agent_updateSysInfo_args() : snmp() {
  }

  virtual ~Agent_updateSysInfo_args() throw() {}

  std::string snmp;
  SysInfo sysinfo;

  _Agent_updateSysInfo_args__isset __isset;

  void __set_snmp(const std::string& val) {
    snmp = val;
  }

  void __set_sysinfo(const SysInfo& val) {
    sysinfo = val;
  }

  bool operator == (const Agent_updateSysInfo_args & rhs) const
  {
    if (!(snmp == rhs.snmp))
      return false;
    if (!(sysinfo == rhs.sysinfo))
      return false;
    return true;
  }
  bool operator != (const Agent_updateSysInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Agent_updateSysInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Agent_updateSysInfo_pargs {
 public:


  virtual ~Agent_updateSysInfo_pargs() throw() {}

  const std::string* snmp;
  const SysInfo* sysinfo;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Agent_updateSysInfo_result__isset {
  _Agent_updateSysInfo_result__isset() : success(false), ex(false) {}
  bool success;
  bool ex;
} _Agent_updateSysInfo_result__isset;

class Agent_updateSysInfo_result {
 public:

  Agent_updateSysInfo_result() : success((RetCode::type)0) {
  }

  virtual ~Agent_updateSysInfo_result() throw() {}

  RetCode::type success;
  Xception ex;

  _Agent_updateSysInfo_result__isset __isset;

  void __set_success(const RetCode::type val) {
    success = val;
  }

  void __set_ex(const Xception& val) {
    ex = val;
  }

  bool operator == (const Agent_updateSysInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const Agent_updateSysInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Agent_updateSysInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Agent_updateSysInfo_presult__isset {
  _Agent_updateSysInfo_presult__isset() : success(false), ex(false) {}
  bool success;
  bool ex;
} _Agent_updateSysInfo_presult__isset;

class Agent_updateSysInfo_presult {
 public:


  virtual ~Agent_updateSysInfo_presult() throw() {}

  RetCode::type* success;
  Xception ex;

  _Agent_updateSysInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Agent_updateInterfaceInfo_args__isset {
  _Agent_updateInterfaceInfo_args__isset() : snmp(false), interfaces(false) {}
  bool snmp;
  bool interfaces;
} _Agent_updateInterfaceInfo_args__isset;

class Agent_updateInterfaceInfo_args {
 public:

  Agent_updateInterfaceInfo_args() : snmp() {
  }

  virtual ~Agent_updateInterfaceInfo_args() throw() {}

  std::string snmp;
  std::vector<InterfaceInfo>  interfaces;

  _Agent_updateInterfaceInfo_args__isset __isset;

  void __set_snmp(const std::string& val) {
    snmp = val;
  }

  void __set_interfaces(const std::vector<InterfaceInfo> & val) {
    interfaces = val;
  }

  bool operator == (const Agent_updateInterfaceInfo_args & rhs) const
  {
    if (!(snmp == rhs.snmp))
      return false;
    if (!(interfaces == rhs.interfaces))
      return false;
    return true;
  }
  bool operator != (const Agent_updateInterfaceInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Agent_updateInterfaceInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Agent_updateInterfaceInfo_pargs {
 public:


  virtual ~Agent_updateInterfaceInfo_pargs() throw() {}

  const std::string* snmp;
  const std::vector<InterfaceInfo> * interfaces;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Agent_updateInterfaceInfo_result__isset {
  _Agent_updateInterfaceInfo_result__isset() : success(false), ex(false) {}
  bool success;
  bool ex;
} _Agent_updateInterfaceInfo_result__isset;

class Agent_updateInterfaceInfo_result {
 public:

  Agent_updateInterfaceInfo_result() : success((RetCode::type)0) {
  }

  virtual ~Agent_updateInterfaceInfo_result() throw() {}

  RetCode::type success;
  Xception ex;

  _Agent_updateInterfaceInfo_result__isset __isset;

  void __set_success(const RetCode::type val) {
    success = val;
  }

  void __set_ex(const Xception& val) {
    ex = val;
  }

  bool operator == (const Agent_updateInterfaceInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const Agent_updateInterfaceInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Agent_updateInterfaceInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Agent_updateInterfaceInfo_presult__isset {
  _Agent_updateInterfaceInfo_presult__isset() : success(false), ex(false) {}
  bool success;
  bool ex;
} _Agent_updateInterfaceInfo_presult__isset;

class Agent_updateInterfaceInfo_presult {
 public:


  virtual ~Agent_updateInterfaceInfo_presult() throw() {}

  RetCode::type* success;
  Xception ex;

  _Agent_updateInterfaceInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Agent_updateInterfaceTraffic_args__isset {
  _Agent_updateInterfaceTraffic_args__isset() : snmp(false), traffic(false) {}
  bool snmp;
  bool traffic;
} _Agent_updateInterfaceTraffic_args__isset;

class Agent_updateInterfaceTraffic_args {
 public:

  Agent_updateInterfaceTraffic_args() : snmp() {
  }

  virtual ~Agent_updateInterfaceTraffic_args() throw() {}

  std::string snmp;
  std::vector<InterfaceTraffic>  traffic;

  _Agent_updateInterfaceTraffic_args__isset __isset;

  void __set_snmp(const std::string& val) {
    snmp = val;
  }

  void __set_traffic(const std::vector<InterfaceTraffic> & val) {
    traffic = val;
  }

  bool operator == (const Agent_updateInterfaceTraffic_args & rhs) const
  {
    if (!(snmp == rhs.snmp))
      return false;
    if (!(traffic == rhs.traffic))
      return false;
    return true;
  }
  bool operator != (const Agent_updateInterfaceTraffic_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Agent_updateInterfaceTraffic_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Agent_updateInterfaceTraffic_pargs {
 public:


  virtual ~Agent_updateInterfaceTraffic_pargs() throw() {}

  const std::string* snmp;
  const std::vector<InterfaceTraffic> * traffic;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Agent_updateInterfaceTraffic_result__isset {
  _Agent_updateInterfaceTraffic_result__isset() : success(false), ex(false) {}
  bool success;
  bool ex;
} _Agent_updateInterfaceTraffic_result__isset;

class Agent_updateInterfaceTraffic_result {
 public:

  Agent_updateInterfaceTraffic_result() : success((RetCode::type)0) {
  }

  virtual ~Agent_updateInterfaceTraffic_result() throw() {}

  RetCode::type success;
  Xception ex;

  _Agent_updateInterfaceTraffic_result__isset __isset;

  void __set_success(const RetCode::type val) {
    success = val;
  }

  void __set_ex(const Xception& val) {
    ex = val;
  }

  bool operator == (const Agent_updateInterfaceTraffic_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const Agent_updateInterfaceTraffic_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Agent_updateInterfaceTraffic_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Agent_updateInterfaceTraffic_presult__isset {
  _Agent_updateInterfaceTraffic_presult__isset() : success(false), ex(false) {}
  bool success;
  bool ex;
} _Agent_updateInterfaceTraffic_presult__isset;

class Agent_updateInterfaceTraffic_presult {
 public:


  virtual ~Agent_updateInterfaceTraffic_presult() throw() {}

  RetCode::type* success;
  Xception ex;

  _Agent_updateInterfaceTraffic_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Agent_updateInterfaceIpMac_args__isset {
  _Agent_updateInterfaceIpMac_args__isset() : snmp(false), ipmac(false) {}
  bool snmp;
  bool ipmac;
} _Agent_updateInterfaceIpMac_args__isset;

class Agent_updateInterfaceIpMac_args {
 public:

  Agent_updateInterfaceIpMac_args() : snmp() {
  }

  virtual ~Agent_updateInterfaceIpMac_args() throw() {}

  std::string snmp;
  std::vector<IpMac>  ipmac;

  _Agent_updateInterfaceIpMac_args__isset __isset;

  void __set_snmp(const std::string& val) {
    snmp = val;
  }

  void __set_ipmac(const std::vector<IpMac> & val) {
    ipmac = val;
  }

  bool operator == (const Agent_updateInterfaceIpMac_args & rhs) const
  {
    if (!(snmp == rhs.snmp))
      return false;
    if (!(ipmac == rhs.ipmac))
      return false;
    return true;
  }
  bool operator != (const Agent_updateInterfaceIpMac_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Agent_updateInterfaceIpMac_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Agent_updateInterfaceIpMac_pargs {
 public:


  virtual ~Agent_updateInterfaceIpMac_pargs() throw() {}

  const std::string* snmp;
  const std::vector<IpMac> * ipmac;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Agent_updateInterfaceIpMac_result__isset {
  _Agent_updateInterfaceIpMac_result__isset() : success(false), ex(false) {}
  bool success;
  bool ex;
} _Agent_updateInterfaceIpMac_result__isset;

class Agent_updateInterfaceIpMac_result {
 public:

  Agent_updateInterfaceIpMac_result() : success((RetCode::type)0) {
  }

  virtual ~Agent_updateInterfaceIpMac_result() throw() {}

  RetCode::type success;
  Xception ex;

  _Agent_updateInterfaceIpMac_result__isset __isset;

  void __set_success(const RetCode::type val) {
    success = val;
  }

  void __set_ex(const Xception& val) {
    ex = val;
  }

  bool operator == (const Agent_updateInterfaceIpMac_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const Agent_updateInterfaceIpMac_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Agent_updateInterfaceIpMac_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Agent_updateInterfaceIpMac_presult__isset {
  _Agent_updateInterfaceIpMac_presult__isset() : success(false), ex(false) {}
  bool success;
  bool ex;
} _Agent_updateInterfaceIpMac_presult__isset;

class Agent_updateInterfaceIpMac_presult {
 public:


  virtual ~Agent_updateInterfaceIpMac_presult() throw() {}

  RetCode::type* success;
  Xception ex;

  _Agent_updateInterfaceIpMac_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Agent_updateRouteInfo_args__isset {
  _Agent_updateRouteInfo_args__isset() : snmp(false), routeinfo(false) {}
  bool snmp;
  bool routeinfo;
} _Agent_updateRouteInfo_args__isset;

class Agent_updateRouteInfo_args {
 public:

  Agent_updateRouteInfo_args() : snmp() {
  }

  virtual ~Agent_updateRouteInfo_args() throw() {}

  std::string snmp;
  std::vector<RouteInfo>  routeinfo;

  _Agent_updateRouteInfo_args__isset __isset;

  void __set_snmp(const std::string& val) {
    snmp = val;
  }

  void __set_routeinfo(const std::vector<RouteInfo> & val) {
    routeinfo = val;
  }

  bool operator == (const Agent_updateRouteInfo_args & rhs) const
  {
    if (!(snmp == rhs.snmp))
      return false;
    if (!(routeinfo == rhs.routeinfo))
      return false;
    return true;
  }
  bool operator != (const Agent_updateRouteInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Agent_updateRouteInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Agent_updateRouteInfo_pargs {
 public:


  virtual ~Agent_updateRouteInfo_pargs() throw() {}

  const std::string* snmp;
  const std::vector<RouteInfo> * routeinfo;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Agent_updateRouteInfo_result__isset {
  _Agent_updateRouteInfo_result__isset() : success(false), ex(false) {}
  bool success;
  bool ex;
} _Agent_updateRouteInfo_result__isset;

class Agent_updateRouteInfo_result {
 public:

  Agent_updateRouteInfo_result() : success((RetCode::type)0) {
  }

  virtual ~Agent_updateRouteInfo_result() throw() {}

  RetCode::type success;
  Xception ex;

  _Agent_updateRouteInfo_result__isset __isset;

  void __set_success(const RetCode::type val) {
    success = val;
  }

  void __set_ex(const Xception& val) {
    ex = val;
  }

  bool operator == (const Agent_updateRouteInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const Agent_updateRouteInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Agent_updateRouteInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Agent_updateRouteInfo_presult__isset {
  _Agent_updateRouteInfo_presult__isset() : success(false), ex(false) {}
  bool success;
  bool ex;
} _Agent_updateRouteInfo_presult__isset;

class Agent_updateRouteInfo_presult {
 public:


  virtual ~Agent_updateRouteInfo_presult() throw() {}

  RetCode::type* success;
  Xception ex;

  _Agent_updateRouteInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Agent_updateProcessInfo_args__isset {
  _Agent_updateProcessInfo_args__isset() : snmp(false), processinfo(false) {}
  bool snmp;
  bool processinfo;
} _Agent_updateProcessInfo_args__isset;

class Agent_updateProcessInfo_args {
 public:

  Agent_updateProcessInfo_args() : snmp() {
  }

  virtual ~Agent_updateProcessInfo_args() throw() {}

  std::string snmp;
  ProcessInfo processinfo;

  _Agent_updateProcessInfo_args__isset __isset;

  void __set_snmp(const std::string& val) {
    snmp = val;
  }

  void __set_processinfo(const ProcessInfo& val) {
    processinfo = val;
  }

  bool operator == (const Agent_updateProcessInfo_args & rhs) const
  {
    if (!(snmp == rhs.snmp))
      return false;
    if (!(processinfo == rhs.processinfo))
      return false;
    return true;
  }
  bool operator != (const Agent_updateProcessInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Agent_updateProcessInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Agent_updateProcessInfo_pargs {
 public:


  virtual ~Agent_updateProcessInfo_pargs() throw() {}

  const std::string* snmp;
  const ProcessInfo* processinfo;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Agent_updateProcessInfo_result__isset {
  _Agent_updateProcessInfo_result__isset() : success(false), ex(false) {}
  bool success;
  bool ex;
} _Agent_updateProcessInfo_result__isset;

class Agent_updateProcessInfo_result {
 public:

  Agent_updateProcessInfo_result() : success((RetCode::type)0) {
  }

  virtual ~Agent_updateProcessInfo_result() throw() {}

  RetCode::type success;
  Xception ex;

  _Agent_updateProcessInfo_result__isset __isset;

  void __set_success(const RetCode::type val) {
    success = val;
  }

  void __set_ex(const Xception& val) {
    ex = val;
  }

  bool operator == (const Agent_updateProcessInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const Agent_updateProcessInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Agent_updateProcessInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Agent_updateProcessInfo_presult__isset {
  _Agent_updateProcessInfo_presult__isset() : success(false), ex(false) {}
  bool success;
  bool ex;
} _Agent_updateProcessInfo_presult__isset;

class Agent_updateProcessInfo_presult {
 public:


  virtual ~Agent_updateProcessInfo_presult() throw() {}

  RetCode::type* success;
  Xception ex;

  _Agent_updateProcessInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Agent_updateIpSecOnlineIp_args__isset {
  _Agent_updateIpSecOnlineIp_args__isset() : ipsecid(false), iplist(false) {}
  bool ipsecid;
  bool iplist;
} _Agent_updateIpSecOnlineIp_args__isset;

class Agent_updateIpSecOnlineIp_args {
 public:

  Agent_updateIpSecOnlineIp_args() : ipsecid() {
  }

  virtual ~Agent_updateIpSecOnlineIp_args() throw() {}

  std::string ipsecid;
  std::vector<IpAddr>  iplist;

  _Agent_updateIpSecOnlineIp_args__isset __isset;

  void __set_ipsecid(const std::string& val) {
    ipsecid = val;
  }

  void __set_iplist(const std::vector<IpAddr> & val) {
    iplist = val;
  }

  bool operator == (const Agent_updateIpSecOnlineIp_args & rhs) const
  {
    if (!(ipsecid == rhs.ipsecid))
      return false;
    if (!(iplist == rhs.iplist))
      return false;
    return true;
  }
  bool operator != (const Agent_updateIpSecOnlineIp_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Agent_updateIpSecOnlineIp_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Agent_updateIpSecOnlineIp_pargs {
 public:


  virtual ~Agent_updateIpSecOnlineIp_pargs() throw() {}

  const std::string* ipsecid;
  const std::vector<IpAddr> * iplist;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Agent_updateIpSecOnlineIp_result__isset {
  _Agent_updateIpSecOnlineIp_result__isset() : success(false), ex(false) {}
  bool success;
  bool ex;
} _Agent_updateIpSecOnlineIp_result__isset;

class Agent_updateIpSecOnlineIp_result {
 public:

  Agent_updateIpSecOnlineIp_result() : success((RetCode::type)0) {
  }

  virtual ~Agent_updateIpSecOnlineIp_result() throw() {}

  RetCode::type success;
  Xception ex;

  _Agent_updateIpSecOnlineIp_result__isset __isset;

  void __set_success(const RetCode::type val) {
    success = val;
  }

  void __set_ex(const Xception& val) {
    ex = val;
  }

  bool operator == (const Agent_updateIpSecOnlineIp_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const Agent_updateIpSecOnlineIp_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Agent_updateIpSecOnlineIp_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Agent_updateIpSecOnlineIp_presult__isset {
  _Agent_updateIpSecOnlineIp_presult__isset() : success(false), ex(false) {}
  bool success;
  bool ex;
} _Agent_updateIpSecOnlineIp_presult__isset;

class Agent_updateIpSecOnlineIp_presult {
 public:


  virtual ~Agent_updateIpSecOnlineIp_presult() throw() {}

  RetCode::type* success;
  Xception ex;

  _Agent_updateIpSecOnlineIp_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Agent_updateMacTable_args__isset {
  _Agent_updateMacTable_args__isset() : snmp(false), mactable(false) {}
  bool snmp;
  bool mactable;
} _Agent_updateMacTable_args__isset;

class Agent_updateMacTable_args {
 public:

  Agent_updateMacTable_args() : snmp() {
  }

  virtual ~Agent_updateMacTable_args() throw() {}

  std::string snmp;
  std::vector<MacTable>  mactable;

  _Agent_updateMacTable_args__isset __isset;

  void __set_snmp(const std::string& val) {
    snmp = val;
  }

  void __set_mactable(const std::vector<MacTable> & val) {
    mactable = val;
  }

  bool operator == (const Agent_updateMacTable_args & rhs) const
  {
    if (!(snmp == rhs.snmp))
      return false;
    if (!(mactable == rhs.mactable))
      return false;
    return true;
  }
  bool operator != (const Agent_updateMacTable_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Agent_updateMacTable_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Agent_updateMacTable_pargs {
 public:


  virtual ~Agent_updateMacTable_pargs() throw() {}

  const std::string* snmp;
  const std::vector<MacTable> * mactable;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Agent_updateMacTable_result__isset {
  _Agent_updateMacTable_result__isset() : success(false), ex(false) {}
  bool success;
  bool ex;
} _Agent_updateMacTable_result__isset;

class Agent_updateMacTable_result {
 public:

  Agent_updateMacTable_result() : success((RetCode::type)0) {
  }

  virtual ~Agent_updateMacTable_result() throw() {}

  RetCode::type success;
  Xception ex;

  _Agent_updateMacTable_result__isset __isset;

  void __set_success(const RetCode::type val) {
    success = val;
  }

  void __set_ex(const Xception& val) {
    ex = val;
  }

  bool operator == (const Agent_updateMacTable_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const Agent_updateMacTable_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Agent_updateMacTable_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Agent_updateMacTable_presult__isset {
  _Agent_updateMacTable_presult__isset() : success(false), ex(false) {}
  bool success;
  bool ex;
} _Agent_updateMacTable_presult__isset;

class Agent_updateMacTable_presult {
 public:


  virtual ~Agent_updateMacTable_presult() throw() {}

  RetCode::type* success;
  Xception ex;

  _Agent_updateMacTable_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class AgentClient : virtual public AgentIf {
 public:
  AgentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  AgentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  RetCode::type registerModule(const ModuleType::type typ);
  void send_registerModule(const ModuleType::type typ);
  RetCode::type recv_registerModule();
  RetCode::type updateHealthStatus(const std::vector<DialHealthResult> & results);
  void send_updateHealthStatus(const std::vector<DialHealthResult> & results);
  RetCode::type recv_updateHealthStatus();
  RetCode::type updateServerStatus(const std::vector<DialServerResult> & results);
  void send_updateServerStatus(const std::vector<DialServerResult> & results);
  RetCode::type recv_updateServerStatus();
  RetCode::type updateDcStatus(const std::vector<DialDcResult> & results);
  void send_updateDcStatus(const std::vector<DialDcResult> & results);
  RetCode::type recv_updateDcStatus();
  RetCode::type updateNginxStatus(const std::vector<DialNginxResult> & results);
  void send_updateNginxStatus(const std::vector<DialNginxResult> & results);
  RetCode::type recv_updateNginxStatus();
  RetCode::type updateSysInfo(const std::string& snmp, const SysInfo& sysinfo);
  void send_updateSysInfo(const std::string& snmp, const SysInfo& sysinfo);
  RetCode::type recv_updateSysInfo();
  RetCode::type updateInterfaceInfo(const std::string& snmp, const std::vector<InterfaceInfo> & interfaces);
  void send_updateInterfaceInfo(const std::string& snmp, const std::vector<InterfaceInfo> & interfaces);
  RetCode::type recv_updateInterfaceInfo();
  RetCode::type updateInterfaceTraffic(const std::string& snmp, const std::vector<InterfaceTraffic> & traffic);
  void send_updateInterfaceTraffic(const std::string& snmp, const std::vector<InterfaceTraffic> & traffic);
  RetCode::type recv_updateInterfaceTraffic();
  RetCode::type updateInterfaceIpMac(const std::string& snmp, const std::vector<IpMac> & ipmac);
  void send_updateInterfaceIpMac(const std::string& snmp, const std::vector<IpMac> & ipmac);
  RetCode::type recv_updateInterfaceIpMac();
  RetCode::type updateRouteInfo(const std::string& snmp, const std::vector<RouteInfo> & routeinfo);
  void send_updateRouteInfo(const std::string& snmp, const std::vector<RouteInfo> & routeinfo);
  RetCode::type recv_updateRouteInfo();
  RetCode::type updateProcessInfo(const std::string& snmp, const ProcessInfo& processinfo);
  void send_updateProcessInfo(const std::string& snmp, const ProcessInfo& processinfo);
  RetCode::type recv_updateProcessInfo();
  RetCode::type updateIpSecOnlineIp(const std::string& ipsecid, const std::vector<IpAddr> & iplist);
  void send_updateIpSecOnlineIp(const std::string& ipsecid, const std::vector<IpAddr> & iplist);
  RetCode::type recv_updateIpSecOnlineIp();
  RetCode::type updateMacTable(const std::string& snmp, const std::vector<MacTable> & mactable);
  void send_updateMacTable(const std::string& snmp, const std::vector<MacTable> & mactable);
  RetCode::type recv_updateMacTable();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class AgentProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<AgentIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (AgentProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_registerModule(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateHealthStatus(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateServerStatus(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateDcStatus(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateNginxStatus(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateSysInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateInterfaceInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateInterfaceTraffic(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateInterfaceIpMac(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateRouteInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateProcessInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateIpSecOnlineIp(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateMacTable(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  AgentProcessor(boost::shared_ptr<AgentIf> iface) :
    iface_(iface) {
    processMap_["registerModule"] = &AgentProcessor::process_registerModule;
    processMap_["updateHealthStatus"] = &AgentProcessor::process_updateHealthStatus;
    processMap_["updateServerStatus"] = &AgentProcessor::process_updateServerStatus;
    processMap_["updateDcStatus"] = &AgentProcessor::process_updateDcStatus;
    processMap_["updateNginxStatus"] = &AgentProcessor::process_updateNginxStatus;
    processMap_["updateSysInfo"] = &AgentProcessor::process_updateSysInfo;
    processMap_["updateInterfaceInfo"] = &AgentProcessor::process_updateInterfaceInfo;
    processMap_["updateInterfaceTraffic"] = &AgentProcessor::process_updateInterfaceTraffic;
    processMap_["updateInterfaceIpMac"] = &AgentProcessor::process_updateInterfaceIpMac;
    processMap_["updateRouteInfo"] = &AgentProcessor::process_updateRouteInfo;
    processMap_["updateProcessInfo"] = &AgentProcessor::process_updateProcessInfo;
    processMap_["updateIpSecOnlineIp"] = &AgentProcessor::process_updateIpSecOnlineIp;
    processMap_["updateMacTable"] = &AgentProcessor::process_updateMacTable;
  }

  virtual ~AgentProcessor() {}
};

class AgentProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  AgentProcessorFactory(const ::boost::shared_ptr< AgentIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< AgentIfFactory > handlerFactory_;
};

class AgentMultiface : virtual public AgentIf {
 public:
  AgentMultiface(std::vector<boost::shared_ptr<AgentIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~AgentMultiface() {}
 protected:
  std::vector<boost::shared_ptr<AgentIf> > ifaces_;
  AgentMultiface() {}
  void add(boost::shared_ptr<AgentIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  RetCode::type registerModule(const ModuleType::type typ) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->registerModule(typ);
    }
    return ifaces_[i]->registerModule(typ);
  }

  RetCode::type updateHealthStatus(const std::vector<DialHealthResult> & results) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateHealthStatus(results);
    }
    return ifaces_[i]->updateHealthStatus(results);
  }

  RetCode::type updateServerStatus(const std::vector<DialServerResult> & results) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateServerStatus(results);
    }
    return ifaces_[i]->updateServerStatus(results);
  }

  RetCode::type updateDcStatus(const std::vector<DialDcResult> & results) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateDcStatus(results);
    }
    return ifaces_[i]->updateDcStatus(results);
  }

  RetCode::type updateNginxStatus(const std::vector<DialNginxResult> & results) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateNginxStatus(results);
    }
    return ifaces_[i]->updateNginxStatus(results);
  }

  RetCode::type updateSysInfo(const std::string& snmp, const SysInfo& sysinfo) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateSysInfo(snmp, sysinfo);
    }
    return ifaces_[i]->updateSysInfo(snmp, sysinfo);
  }

  RetCode::type updateInterfaceInfo(const std::string& snmp, const std::vector<InterfaceInfo> & interfaces) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateInterfaceInfo(snmp, interfaces);
    }
    return ifaces_[i]->updateInterfaceInfo(snmp, interfaces);
  }

  RetCode::type updateInterfaceTraffic(const std::string& snmp, const std::vector<InterfaceTraffic> & traffic) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateInterfaceTraffic(snmp, traffic);
    }
    return ifaces_[i]->updateInterfaceTraffic(snmp, traffic);
  }

  RetCode::type updateInterfaceIpMac(const std::string& snmp, const std::vector<IpMac> & ipmac) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateInterfaceIpMac(snmp, ipmac);
    }
    return ifaces_[i]->updateInterfaceIpMac(snmp, ipmac);
  }

  RetCode::type updateRouteInfo(const std::string& snmp, const std::vector<RouteInfo> & routeinfo) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateRouteInfo(snmp, routeinfo);
    }
    return ifaces_[i]->updateRouteInfo(snmp, routeinfo);
  }

  RetCode::type updateProcessInfo(const std::string& snmp, const ProcessInfo& processinfo) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateProcessInfo(snmp, processinfo);
    }
    return ifaces_[i]->updateProcessInfo(snmp, processinfo);
  }

  RetCode::type updateIpSecOnlineIp(const std::string& ipsecid, const std::vector<IpAddr> & iplist) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateIpSecOnlineIp(ipsecid, iplist);
    }
    return ifaces_[i]->updateIpSecOnlineIp(ipsecid, iplist);
  }

  RetCode::type updateMacTable(const std::string& snmp, const std::vector<MacTable> & mactable) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateMacTable(snmp, mactable);
    }
    return ifaces_[i]->updateMacTable(snmp, mactable);
  }

};

}}}} // namespace

#endif
